#include<iostream>
#include<cstring>
using namespace std;

const int MAX_SIZE = 20;
const int MAX_NAME = 20;

class Student
{
private:
	char firstName[MAX_NAME];
	char lastName[MAX_NAME];
public: 
	Student(char* _firstName = "" , char* _lastName= "" )
	{
		strcpy_s(firstName, _firstName);
		strcpy_s(lastName, _lastName);
	}
	void printStudents()
	{
		cout << "Student's name: " << firstName << "  " << lastName << endl;
	}
};
class Group
{
private: 
	char name[MAX_NAME];
	Student listOfStudents[MAX_SIZE];
	int studentsLength ;
public:
	void addStudent(Student& student)
	{
		listOfStudents[studentsLength] = student;
		studentsLength++;
	}
	void printGroups()
	{
		cout << "Group's name: " << name << endl;
		for (int i = 0; i < studentsLength; i++)
		{
			listOfStudents[i].printStudents();
		}
	}
	Group(char* _name=" " )
	{
		strcpy_s(name, _name);
	}
	
};
class Teacher
{
private: 
	char firstName[MAX_NAME];
	char lastName[MAX_NAME];
	Group listOfGroups[MAX_SIZE];
	int groupsLength ;
public: 
	Teacher(char* _firstname = "", char* _lastname = "")
	{
		strcpy_s(firstName, _firstname);
		strcpy_s(lastName, _lastname);
	}
	void addGroup(Group& group)
	{
		listOfGroups[groupsLength] = group;
		groupsLength++;
	}
	void printTeachers()
	{
		cout << "Teacher's name: " << firstName << "  " << lastName << endl;
		for (int i = 0; i < groupsLength; i++)
			listOfGroups[i].printGroups();
	}
	
};
class School
{
private:
	char name[MAX_NAME];
	Teacher listOfTeachers[MAX_SIZE];
	int teachersLength ;
	Group listOfGroups[MAX_SIZE];
	int groupsLength ;
	Student listOfStudents[MAX_SIZE];
	int  studentsLength ;
public: 
	/*School(int _teachers = 0, int _groups = 0, int _students = 0)
	{
		teachersLength = _teachers;
		groupsLength = _groups;
		studentsLength = _students;

	}*/

	School(char* _schoolName = " ") : teachersLength(0), groupsLength(0), studentsLength(0)
	{
		strcpy_s(name, _schoolName);
	}
	void addStudent(Student& student, Group& group)
	{
		listOfStudents[studentsLength] = student;
		studentsLength++;
		group.addStudent(student);
	    
	}
	void addTeacher(Teacher& teacher)
	{
		listOfTeachers[teachersLength] = teacher;
		teachersLength++;
	

	}
	void addGroup(Teacher& teacher, Group& group)
	{
		listOfGroups[groupsLength] = group;
		groupsLength++;
		teacher.addGroup(group);
	}
};


int main()
{
	School school("Svoboda");
	Group gr("angliiski ezik");
	Teacher t("Ivan", " Petrov");
	Student st("Vasil ", "Todorov");

	school.addStudent(st, gr);
	school.addGroup(t, gr);
	//.addTeacher(t);
	gr.addStudent();
	t.printTeachers();


	system("pause");
	return 0;
}
